	function addLineShape( shape, color, x, y, z, rx, ry, rz, s,texture ) {
		// lines
		shape.autoClose = true;
		var points = shape.getPoints();
		var spacedPoints = shape.getSpacedPoints( 50 );
		var geometryPoints = new THREE.BufferGeometry().setFromPoints( points );
		var geometrySpacedPoints = new THREE.BufferGeometry().setFromPoints( spacedPoints );
		// solid line
		var line = new THREE.Line( geometryPoints, new THREE.LineBasicMaterial( { color: color } ) );
		line.position.set( x, y, z - 25 );
		line.rotation.set( rx, ry, rz );
		line.scale.set( s, s, s );
		//group.add( line );
		// line from equidistance sampled points
		var line = new THREE.Line( geometrySpacedPoints, new THREE.LineBasicMaterial( { color: color } ) );
		line.position.set( x, y, z + 25 );
		line.rotation.set( rx, ry, rz );
		line.scale.set( s, s, s );
		//group.add( line );
		// vertices from real points
		var particles = new THREE.Points( geometryPoints, new THREE.PointsMaterial( { color: color, size: 4 } ) );
		particles.position.set( x, y, z + 75 );
		particles.rotation.set( rx, ry, rz );
		particles.scale.set( s, s, s );
		//group.add( particles );
		// equidistance sampled points
		var particles = new THREE.Points( geometrySpacedPoints, new THREE.PointsMaterial( { color: color, size: 4 } ) );
		particles.position.set( x, y, z + 125 );
		particles.rotation.set( rx, ry, rz );
		particles.scale.set( s, s, s );
		//group.add( particles );
	}
